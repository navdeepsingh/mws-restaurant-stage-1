class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants/"}static get REVIEWS_URL(){return"http://localhost:1337/reviews/"}static fetchRestaurants(e="indexeddb",t="create"){let r,n=indexedDB.open("mws-restaurant-db",6);return new Promise(function(o,a){n.onupgradeneeded=function(e){if(console.log("UpgradeNeeded Running.."),!(r=e.target.result).objectStoreNames.contains("restaurants")){r.createObjectStore("restaurants")}},n.onsuccess=function(n){let a=(r=n.target.result).transaction(["restaurants"],"readonly").objectStore("restaurants").get(1);a.onsuccess=function(n){let a=n.target.result;void 0!==a&&"indexeddb"==e?(console.log("Getting JSON from: IndexedDB"),o(a)):o(fetch(DBHelper.DATABASE_URL).then(e=>e).then(e=>{let n=e.json();return"create"==t?DBHelper.createDB(r,n):DBHelper.updateDB(r,n),console.log("Getting JSON from: Network"),n}).catch(e=>{console.log(`Error: ${e}`)}))},a.onerror=function(e){console.log("On Error")}}})}static createDB(e,t){t.then(t=>{let r=e.transaction(["restaurants"],"readwrite").objectStore("restaurants").add(t,1);r.onerror=function(e){console.log("Error",e.target.error.name)},r.onsuccess=function(e){console.log("Added Successfully")}})}static updateDB(e,t){t.then(t=>{let r=e.transaction(["restaurants"],"readwrite").objectStore("restaurants").put(t,1);r.onerror=function(e){console.log("Error",e.target.error.name)},r.onsuccess=function(e){console.log("Updated Successfully")}})}static fetchRestaurantById(e){return DBHelper.fetchRestaurants().then(t=>{const r=t.find(t=>t.id==e);if(r)return fetch(DBHelper.REVIEWS_URL+`?restaurant_id=${r.id}`).then(e=>e.json()).then(e=>(r.reviews=e,r));console.log("Restaurant does not exist")})}static fetchRestaurantByCuisine(e){return DBHelper.fetchRestaurants().then(t=>{return t.filter(t=>t.cuisine_type==e)})}static fetchRestaurantByNeighborhood(e){return DBHelper.fetchRestaurants().then(t=>{return t.filter(t=>t.neighborhood==e)})}static fetchRestaurantByCuisineAndNeighborhood(e,t){return DBHelper.fetchRestaurants().then(r=>{let n=r;return"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),n})}static fetchNeighborhoods(){return DBHelper.fetchRestaurants().then(e=>{const t=e.map((t,r)=>e[r].neighborhood);return t.filter((e,r)=>t.indexOf(e)==r)})}static fetchCuisines(){return DBHelper.fetchRestaurants().then(e=>{const t=e.map((t,r)=>e[r].cuisine_type);return t.filter((e,r)=>t.indexOf(e)==r)})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.id}.jpg`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static toggleFavoriteRestaurant(e,t,r){return new Promise(function(n,o){fetch(DBHelper.DATABASE_URL+`${e.id}/?is_favorite=${t}`,{method:"put"}).then(e=>(e.ok||(console.log("Something goes wrong.."),o("Failed")),t=!t,r.classList.toggle("fav"),DBHelper.fetchRestaurants("network","upadate").then(e=>{n(t)})))})}static postRestaurantReview(e,t){let r={};for(var n of t.entries())r[n[0]]=n[1];return r.restaurant_id=e.id,new Promise(function(e,t){fetch(DBHelper.REVIEWS_URL,{method:"POST",body:JSON.stringify(r),headers:{Accept:"application/json"}}).then(t=>{e(t.ok)}).catch(e=>{throw e})})}}