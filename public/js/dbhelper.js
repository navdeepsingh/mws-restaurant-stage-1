class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants/"}static get REVIEWS_URL(){return"http://localhost:1337/reviews/"}static get DB_VERSION(){return 6}static fetchRestaurants(e="indexeddb",t="create"){let r,n=indexedDB.open("mws-restaurant-db",this.DB_VERSION);return new Promise(function(s,o){n.onupgradeneeded=function(e){(console.log("UpgradeNeeded Running.."),(r=e.target.result).objectStoreNames.contains("restaurants")||r.createObjectStore("restaurants"),r.objectStoreNames.contains("reviews"))||r.createObjectStore("reviews",{keyPath:"Key",autoIncrement:!0}).createIndex("Key","Key",{unique:!1})},n.onsuccess=function(n){let o=(r=n.target.result).transaction(["restaurants"],"readonly").objectStore("restaurants").get(1);o.onsuccess=function(n){let o=n.target.result;void 0!==o&&"indexeddb"==e?(console.log("Getting JSON from: IndexedDB"),s(o)):s(fetch(DBHelper.DATABASE_URL).then(e=>e).then(e=>{let n=e.json();return"create"==t?DBHelper.createRestaurantsDB(r,n):DBHelper.updateRestaurantsDB(r,n),console.log("Getting JSON from: Network"),n}).catch(e=>{console.log(`Error: ${e}`)}))},o.onerror=function(e){console.log("On Error")}}})}static createRestaurantsDB(e,t){t.then(t=>{let r=e.transaction(["restaurants"],"readwrite").objectStore("restaurants").add(t,1);r.onerror=function(e){console.log("Error",e.target.error.name)},r.onsuccess=function(e){console.log("Added Successfully")}})}static updateRestaurantsDB(e,t){t.then(t=>{let r=e.transaction(["restaurants"],"readwrite").objectStore("restaurants").put(t,1);r.onerror=function(e){console.log("Error",e.target.error.name)},r.onsuccess=function(e){console.log("Updated Successfully")}})}static createReviewsDB(e){let t;indexedDB.open("mws-restaurant-db",this.DB_VERSION).onsuccess=function(r){let n=(t=r.target.result).transaction(["reviews"],"readwrite").objectStore("reviews").add(e);n.onerror=function(e){console.log("Error",e.target.error.name)},n.onsuccess=function(e){console.log("Reviews Added Successfully")}}}static fetchRestaurantById(e){return DBHelper.fetchRestaurants().then(t=>{const r=t.find(t=>t.id==e);if(r)return fetch(DBHelper.REVIEWS_URL+`?restaurant_id=${r.id}`).then(e=>e.json()).then(e=>(r.reviews=e,r));console.log("Restaurant does not exist")})}static fetchRestaurantByCuisine(e){return DBHelper.fetchRestaurants().then(t=>{return t.filter(t=>t.cuisine_type==e)})}static fetchRestaurantByNeighborhood(e){return DBHelper.fetchRestaurants().then(t=>{return t.filter(t=>t.neighborhood==e)})}static fetchRestaurantByCuisineAndNeighborhood(e,t){return DBHelper.fetchRestaurants().then(r=>{let n=r;return"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),n})}static fetchNeighborhoods(){return DBHelper.fetchRestaurants().then(e=>{const t=e.map((t,r)=>e[r].neighborhood);return t.filter((e,r)=>t.indexOf(e)==r)})}static fetchCuisines(){return DBHelper.fetchRestaurants().then(e=>{const t=e.map((t,r)=>e[r].cuisine_type);return t.filter((e,r)=>t.indexOf(e)==r)})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.id}.jpg`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static toggleFavoriteRestaurant(e,t,r){return new Promise(function(n,s){fetch(DBHelper.DATABASE_URL+`${e.id}/?is_favorite=${t}`,{method:"put"}).then(e=>(e.ok||(console.log("Something goes wrong.."),s("Failed")),t=!t,r.classList.toggle("fav"),DBHelper.fetchRestaurants("network","upadate").then(e=>{n(t)})))})}static postRestaurantReview(e,t){let r={};for(var n of t.entries())r[n[0]]=n[1];return r.restaurant_id=e.id,new Promise(function(e,t){const n=JSON.stringify(r);return fetch(DBHelper.REVIEWS_URL,{method:"POST",body:n,headers:{Accept:"application/json"}}).then(t=>{console.log(t),e(t.ok)}).catch(e=>{console.log("Network Error"),t(DBHelper.createReviewsDB(r))})})}static dummyPromise(){return new Promise(function(e,t){e("Test")})}static saveRestaurantReview(e){let t,r=indexedDB.open("mws-restaurant-db",DBHelper.DB_VERSION);return new Promise(function(e,n){r.onsuccess=function(r){let s=(t=r.target.result).transaction(["reviews"],"readwrite").objectStore("reviews");s.getAll().onsuccess=function(t){t.target.result.map((e,t)=>fetch(DBHelper.REVIEWS_URL,{method:"POST",body:JSON.stringify(e),headers:{Accept:"application/json"}}).then(e=>e).catch(e=>{console.log(e)}));let r=s.clear();r.onsuccess=function(t){console.log(`#${s} is Cleared`),e(!0)},r.onerror=function(e){n(!1)}}}})}}